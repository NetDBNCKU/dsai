!function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=128)}({128:function(e,t,n){"use strict";n(129),n(130)},129:function(e,t){},130:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(){var e=""+(0,s.default)()+(0,a.default)()+(0,l.default)()+(0,u.default)()+(0,c.default)();(0,o.default)("body").prepend(e),(0,o.default)(".loader").remove()}var o=r(n(65)),s=r(n(131)),a=r(n(145)),l=r(n(148)),u=r(n(150)),c=r(n(152));(0,o.default)(document).ready(function(){i()})},131:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=(0,i.default)(),t=(0,o.default)();return n=e,r=t,"<header>"+n+r+"</header>";var n,r};var i=r(n(132)),o=r(n(144))},132:function(e,t,n){"use strict";function r(e){return'\n    <li class="nav-item">\n      <a class="nav-link" href="'+e.url+'">'+e.name+"</a>\n    </li>"}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return function(e){return'\n    <nav>\n        <div class="container">\n          <ul class="nav justify-content-end">\n            '+e+"\n          </ul>\n        </div>\n    </nav>"}(s.default.nav.map(r).join(""))};var i,o=n(50),s=(i=o)&&i.__esModule?i:{default:i}},133:function(e,t,n){e.exports=n.p+"assets/media/ogImage.png"},134:function(e,t,n){e.exports=n.p+"assets/media/kao-min.jpg"},135:function(e,t,n){e.exports=n.p+"assets/media/chuang-min.jpg"},136:function(e,t,n){e.exports=n.p+"assets/media/jie-min.jpg"},137:function(e,t,n){e.exports=n.p+"assets/media/lee-min.jpg"},138:function(e,t,n){e.exports=n.p+"assets/media/na-min.jpg"},139:function(e,t,n){e.exports=n.p+"assets/media/him-min.jpg"},140:function(e,t,n){e.exports=n.p+"assets/media/ting-min.jpg"},141:function(e,t,n){e.exports=n.p+"assets/media/ou-min.jpg"},142:function(e,t,n){e.exports=n.p+"assets/media/bo-min.jpg"},143:function(e,t,n){e.exports=n.p+"assets/media/wei-min.jpg"},144:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return e=o.default,'\n  <div class="jumbotron jumbotron-fluid">\n    <div class="container">\n      <h1 class="text-title">'+e.title+'</h1>\n      <h2>Spring 2018, National Cheng Kung University</h2>\n      <p class="text-description">'+e.description+"</p>\n    </div>\n  </div>\n  ";var e};var r,i=n(50),o=(r=i)&&r.__esModule?r:{default:r}},145:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=(0,i.default)(),t=(0,o.default)();return n=e,r=t,'\n    <section id="course-info" class="course-info">\n      <div class="container">\n      '+n+"\n      "+r+"\n      </div>\n    </section>";var n,r};var i=r(n(146)),o=r(n(147))},146:function(e,t,n){"use strict";function r(e){return'\n  <div class="teachers-avatar">\n      <div class="avatar">\n        <img src="'+e.image+'" alt="'+e.name+'">\n      </div>\n      <div class="teacher-info">\n        '+(e.email?'<a href="mailto:'+e.email+'"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24"><path d="M0 3v18h24v-18h-24zm21.518 2l-9.518 7.713-9.518-7.713h19.036zm-19.518 14v-11.817l10 8.104 10-8.104v11.817h-20z"/></svg></a>&nbsp':"")+'\n        <a href="'+e.url+'" class="teacher-name">\n          <p>\n            '+e.name+"<br>\n          </p>\n        </a>\n      </div>\n  </div>"}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=s.default.teachers.instructors.map(r).join(""),t=s.default.teachers.assistants.map(r).join("");return function(e,t){return'\n  <div class="info-teachers row">\n    <div class="teacher-instructor col-md-4">\n      <h2>Instructors</h2>\n      '+e+'\n    </div>\n    <div class="teacher-box col-md-8">\n      <h2>Teaching Assistants</h2>\n      '+t+"\n    </div>\n  </div>\n  "}(e,t)};var i,o=n(50),s=(i=o)&&i.__esModule?i:{default:i}},147:function(e,t,n){"use strict";function r(e){return'\n  <div class="general-time listItem col-md-6">\n    <div class="listItem-content">\n      <h2>'+e.icon+e.title+"</h2>\n      <p>"+e.content+"\n      </p>\n    </div>\n  </div>\n  "}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return function(e){return'<div class="info-general list row">'+e+"</div>"}(s.default.info.map(r).join(""))};var i,o=n(50),s=(i=o)&&i.__esModule?i:{default:i}},148:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e){return e.content?function(e){return'\n    <li class="listItem" data-toggle="modal" data-target="#'+e.date+'-modal">\n      <div class="listItem-index">\n        '+e.date+'\n      </div>\n      \x3c!-- Button trigger modal --\x3e\n      <div class="listItem-content">\n        <svg xmlns="http://www.w3.org/2000/svg" width="8" height="8" viewBox="0 0 8 8">\n          <path d="M3 0c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm-1.5 2.5c-.83 0-1.5.67-1.5 1.5h1c0-.28.22-.5.5-.5s.5.22.5.5-1 1.64-1 2.5c0 .86.67 1.5 1.5 1.5s1.5-.67 1.5-1.5h-1c0 .28-.22.5-.5.5s-.5-.22-.5-.5c0-.36 1-1.84 1-2.5 0-.81-.67-1.5-1.5-1.5z" transform="translate(2)"/>\n        </svg>\n        - '+e.title+'\n      </div>\n      \x3c!-- Modal --\x3e\n      <div class="modal fade" id="'+e.date+'-modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">\n        <div class="modal-dialog" role="document">\n          <div class="modal-content">\n            <div class="modal-header">\n              <h5 class="modal-title" id="exampleModalLongTitle">'+e.title+'</h5>\n              <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                <span aria-hidden="true">&times;</span>\n              </button>\n            </div>\n            <div class="modal-body">\n              '+(0,o.default)(e.content)+'\n            </div>\n            <div class="modal-footer">\n              <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </li>\n  '}(e):function(e){return'\n    <li class="listItem">\n      <div class="listItem-index">\n        '+e.date+'\n      </div>\n      <div class="listItem-content">\n        <a href="'+e.url+'">\n          <svg xmlns="http://www.w3.org/2000/svg" width="8" height="8" viewBox="0 0 8 8">\n            <path d="M5.88.03c-.18.01-.36.03-.53.09-.27.1-.53.25-.75.47a.5.5 0 1 0 .69.69c.11-.11.24-.17.38-.22.35-.12.78-.07 1.06.22.39.39.39 1.04 0 1.44l-1.5 1.5c-.44.44-.8.48-1.06.47-.26-.01-.41-.13-.41-.13a.5.5 0 1 0-.5.88s.34.22.84.25c.5.03 1.2-.16 1.81-.78l1.5-1.5c.78-.78.78-2.04 0-2.81-.28-.28-.61-.45-.97-.53-.18-.04-.38-.04-.56-.03zm-2 2.31c-.5-.02-1.19.15-1.78.75l-1.5 1.5c-.78.78-.78 2.04 0 2.81.56.56 1.36.72 2.06.47.27-.1.53-.25.75-.47a.5.5 0 1 0-.69-.69c-.11.11-.24.17-.38.22-.35.12-.78.07-1.06-.22-.39-.39-.39-1.04 0-1.44l1.5-1.5c.4-.4.75-.45 1.03-.44.28.01.47.09.47.09a.5.5 0 1 0 .44-.88s-.34-.2-.84-.22z"/>\n          </svg>\n          - '+e.title+"\n        </a>\n      </div>\n      </a>\n    </li>"}(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return function(e){return'\n    <section id="course-announcements" class="course-announcements">\n      <div class="container">\n        <h2>Announcements</h2>\n        <ul class="newsList">\n          '+e+"\n        </ul>\n      </div>\n    </section>\n  "}(s.default.map(i).join(""))};var o=r(n(66)),s=r(n(149))},149:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=[{date:"4/24",title:"HW2 program form",type:"url",url:"https://docs.google.com/forms/d/e/1FAIpQLSdHtJIoxeeFSSkRJIFPPf1TOAZuYCmA0ODJMS4HceGBKyFPaw/viewform"},{date:"4/3",title:"Released Midterm project",type:"url",url:"https://paper.dropbox.com/doc/DSAI-MidTerm-Project-F7BPIajkkO59MyAniHQx2"},{date:"3/21",title:"Released HW2",type:"url",url:"https://paper.dropbox.com/doc/DSAI-HW2-BooleanSearch-i7YXC1eALcDFnDTezvgIP"},{date:"3/20",title:"Score of HW1",type:"content",content:"\nThe score of HW1 is announced on moodle, please check it.\n    "},{date:"3/14",title:"Error List of HW1",type:"content",content:"\nThe error list is announced on moodle. If you are in the error list, please fix the bug and update your repository.\n    "},{date:"3/1",title:"Updated HW1 Submission",type:"content",content:"\nIf you need to modify your previous response, login to the same Google account you used and then you can modify it.\n\n[HW1 Submission Form](https://docs.google.com/forms/d/e/1FAIpQLSf3rtkRd664Cp51ti9vQQhSxa6kQR6aSOQ4_BrsfWm3Jukjvw/viewform)"},{date:"2/27",title:"Released HW1",type:"url",url:"https://paper.dropbox.com/doc/DSAI-HW1-AutoTrading-V1OFhOpBZiXEfwtF9Ebj2"}]},150:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e){return' <th scope="col">'+e+"</th>"}function o(e,t){return'\n    <tr>\n      <th data-title="Week" data-date="'+e.date+'" scope="row">Week '+(t+1)+'</th>\n      <td data-title="Date" class="mobile--hide">'+e.date+'</td>\n      <td data-title="Description">'+(0,s.default)(e.description)+'</td>\n      <td data-title="Technical Lecture">'+(0,s.default)(e.reading)+"</td>\n    </tr>\n  "}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=a.default.columnTitle.map(i).join(""),t=a.default.rowData.map(o).join("");return function(e,t){return'\n    <section id="course-schedule" class="course-schedule">\n      <div class="container">\n        <h2>Schedule</h2>\n        <table class="table">\n          <thead>\n            <tr>\n              '+e+"\n            </tr>\n          </thead>\n          <tbody>\n            "+t+"\n          </tbody>\n        </table>\n      </div>\n    </section>\n    "}(e,t)};var s=r(n(66)),a=r(n(151))},151:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={columnTitle:["Week","Date","Description","Technical Lecture"],rowData:[{date:"2/27",description:"\nCourse Introduction and Basics of Supervised/Unsupervised Learning\n- [Slides: Course introduction](https://drive.google.com/file/d/1k9RGBtcop763nfHHlXjOe7di9E9KJysN/view?usp=sharing)\n- [Slides: Supervised unsupervised Learning](https://drive.google.com/file/d/19BzWDB4Mx7GufStCPZp4VSRjceh3WTjR/view?usp=sharing)\n",reading:"[Introduction to python data science tools](https://github.com/Lee-W/Intro_to_Python_Data_Science_Tools)"},{date:"3/6",description:"\nDatabase Selected Topics, including NoSQL, Spatial DB, DB Performance\n- [Slides: Advances in supervised learning](https://drive.google.com/file/d/1oZpzOnSiOeo_VNTVp8hh6nrGXY3WY0zk/view?usp=sharing)\n- [Slides: Big data](https://drive.google.com/file/d/1joUqfZm-zq3NtHBC63AkoO2qN7IxMTQd/view?usp=sharing)\n",reading:"[Introduction to Apache Spark](https://drive.google.com/open?id=1rik2fkGI9U7n_Fbu7cxIs0VvhQ7lcrm3)"},{date:"3/13",description:"\nData Mining Selected Topics, including Association Rule, Sequential Patterns, Web Mining, Spatial-Temporal Mining, Social Network Mining\n- [Slides: Support Vector Machine and PageRank](https://drive.google.com/file/d/1RwJJ0cFqKEAJHkekkg3yzlfJ9xizh--L/view?usp=sharing)\n",reading:""},{date:"3/20",description:"\nIntroduction to Deep Learning\n- [Slides: Nature Language Processing With Deep Learning 1](https://drive.google.com/open?id=18MKIImDgEHJFU_w8zoih-QACjBxq2YLL)\n",reading:"[Introduction to Kaggle](https://drive.google.com/open?id=10-H7DM4lFaBBkSsiFJ_e_k5XgHXPDRfk)"},{date:"3/27",description:"\nIntroduce to RL & MDP\n- [Slides: An introduction to Reinforcement Learning](https://drive.google.com/open?id=1NHUSJJNs-0wz-K9VmH515N4Y-B88rA67)\n- [Slides: Multi-armed bandit problem](https://drive.google.com/open?id=1hfBOeZf2Gfuq_Uf0_3UxiC1HTFAR5t-6)\n- [Slides: Markov decision process](https://drive.google.com/file/d/12p5CbD9GONIGpLVk8jIFasFf3qY1Gvzz/view?usp=sharing)\n- [Reference of MDP](http://www0.cs.ucl.ac.uk/staff/d.silver/web/Teaching_files/MDP.pdf)\n",reading:""},{date:"4/3",description:"Spring break",reading:""},{date:"4/10",description:"Text Processing\n- [Slides: Nature Language Processing With Deep Learning 2](https://drive.google.com/open?id=14xOHMBhuUo9x6vGOXhNVSRMYSTQqrSGw)\n      ",reading:"[PIXNET's guest lecture](https://docs.google.com/presentation/d/1mZlnQYLPKvxpF9zAAYGwqFtJkuFT0JNGbI5jk8Gg84g/edit?usp=sharing)"},{date:"4/17",description:"\nAdvanced Topics on Text-based Analytics\n- [Slides: Nature Language Processing With Deep Learning 3](https://drive.google.com/open?id=1Q4ChOUfxJCk1KAO_0go9sLuJGeeqM3MY)\n",reading:""},{date:"4/24",description:"\nMDP cont. & Dynamic Programming\n- [Slides: Dynamic Programming](https://drive.google.com/open?id=1itD9R-ubLU5lLtvYOzz8evqLfzHlvRU_)\n",reading:"[Sample Code of DP](https://github.com/NCKU-CCS/DSAI)"},{date:"5/1",description:"\nMonte Carlo Method, Temporal-Difference Method & Deep Q Learning\n- [Slides: Monte Carlo method](https://drive.google.com/open?id=1BaWkt6KsD3kBNNvAqL97_xlYpXBJfbiY)\n",reading:""},{date:"5/8",description:"\nMid-term presentation\n",reading:""},{date:"5/15",description:"\nPolicy Gradient & Actor-Critic Algorithm\n",reading:""},{date:"5/22",description:"\nTransfer Learning & Hierarchical RL\n",reading:""},{date:"5/29",description:"\nResearch papers & Open problems\n",reading:""},{date:"6/5",description:"\nTeam-based paper presentation I",reading:""},{date:"6/12",description:"\nTeam-based paper presentation II",reading:""},{date:"6/19",description:"Final Project Presentation I",reading:""},{date:"6/26",description:"Final Project Presentation II",reading:""}]}},152:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return e=o.default,'\n  <section id="course-resources" class="course-resources">\n    <div class="container">\n      <h2>Resources</h2>\n      <div>'+(0,i.default)(e)+"</div>\n    </div>\n  </section>\n  ";var e};var i=r(n(66)),o=r(n(153))},153:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\n##### Courses\n- [David Silver's Reinforcement Learning, 2015, UCL](http://www0.cs.ucl.ac.uk/staff/d.silver/web/Teaching.html)\n- [CS 294: Deep Reinforcement Learning, Fall 2017, Berkeley](http://rll.berkeley.edu/deeprlcourse/#lecture-videos)\n- [CMU 10703: Deep Reinforcement Learning and Control, Spring 2017, CMU](https://katefvision.github.io/)\n- [CS231n: Convolutional Neural Networks for Visual Recognition, Spring 2017, Stanford](http://cs231n.stanford.edu/)\n- [Geoffrey Hinton's Neural Networks for Machine Learning on Coursera](https://www.coursera.org/learn/neural-networks)\n\n##### Additional Materials\n- [Algorithms for Reinforcement Learning](https://sites.ualberta.ca/~szepesva/RLBook.html)\n"},42:function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},50:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),r(n(133));var i=r(n(134)),o=r(n(135)),s=r(n(136)),a=r(n(137)),l=r(n(138)),u=r(n(139)),c=r(n(140)),p=r(n(141)),d=r(n(142)),f=r(n(143));t.default={nav:[{name:"Announcements",url:"#course-announcements"},{name:"Schedule",url:"#course-schedule"},{name:"Resources",url:"#course-resources"}],title:"Data Science and Artificial Intelligence Practice",description:"Data Mining/Machine Learning Theory and Practice. \n    In this course, a series of DM/ML research topics will be taught. \n    There are some short technical lectures and short academic/industrial panel discussions. \n    We emphasize the importance of practices in this course. \n    Your brain, theoretically, is a kind of models which should be trained by lots of instances. \n    Based on the spirit of trial-and-error, we will give 5 HWs, 2 projects, one paper presentation, \n    and mostly, you should program individually.",teachers:{instructors:[{name:"Kun-Ta Chuang",image:o.default,url:"https://cv_ktchuang.cannerapp.com/"},{name:"Hung-Yu Kao",image:i.default,url:"http://myweb.ncku.edu.tw/~hykao/"}],assistants:[{name:"Jie-Han Chen",image:s.default,url:"https://www.linkedin.com/in/jie-han-chen-325620a3/",email:"jhchen@netdb.csie.ncku.edu.tw"},{name:"Lo Pang-Yun Ting",image:c.default,url:"https://www.linkedin.com/in/lo-pang-yun-ting-5a7ab2144/"},{name:"Lok-Him Leung ",image:u.default,url:"#"},{name:"Wei Lee",image:a.default,url:"http://lee-w.github.io/"},{name:"Hao-Tzu Huang",image:l.default,url:"https://www.linkedin.com/in/nana-huang-b42b70129/"},{name:"Cheng-Kuan Ou",image:p.default,url:"https://www.linkedin.com/in/cheng-kuan-ou-620033125/"},{name:"Bo-Heng Chen",image:d.default,url:"https://www.linkedin.com/in/bohengchen/"},{name:"Chien-Wei Chang",image:f.default,url:"#"}]},info:[{title:"Lecture",content:"Spring quarter 2018\n        <br>Lecture times: Tue, 9:10-12:00pm, Feb 27 - June 26\n        <br>Location: 65104",icon:'\n        <svg xmlns="http://www.w3.org/2000/svg" width="8" height="8" viewBox="0 0 8 8">\n          <path d="M4 0c-2.2 0-4 1.8-4 4s1.8 4 4 4 4-1.8 4-4-1.8-4-4-4zm0 1c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm-.5 1v2.22l.16.13.5.5.34.38.72-.72-.38-.34-.34-.34v-1.81h-1z" />\n        </svg>'},{title:"Evaluation",content:"5 HWs (50%), 1 mid-term project (15%), team-based paper presentation (10%), final-term project (25%) Panel Discussion (5%\n        bonus)",icon:'\n        <svg xmlns="http://www.w3.org/2000/svg" width="8" height="8" viewBox="0 0 8 8">\n          <path d="M3.5 0c-.97 0-1.84.4-2.47 1.03l2.97 2.97v-3.97c-.16-.02-.33-.03-.5-.03zm1.5 1.06v3.41l-2.72 2.72c.61.5 1.37.81 2.22.81 1.93 0 3.5-1.57 3.5-3.5 0-1.76-1.31-3.19-3-3.44zm-4.09 1.31c-.56.54-.91 1.29-.91 2.13 0 .96.46 1.79 1.16 2.34l2.13-2.13-2.38-2.34z"/>\n        </svg>'},{title:"Textbook",content:'<a href="http://incompleteideas.net/book/the-book-2nd.html">Reinforcement Learning: An Introduction, 2nd Edition</a>',icon:'\n        <svg xmlns="http://www.w3.org/2000/svg" width="8" height="8" viewBox="0 0 8 8">\n          <path d="M1 0c-.07 0-.13.01-.19.03-.39.08-.7.39-.78.78-.03.06-.03.12-.03.19v5.5c0 .83.67 1.5 1.5 1.5h5.5v-1h-5.5c-.28 0-.5-.22-.5-.5s.22-.5.5-.5h5.5v-5.5c0-.28-.22-.5-.5-.5h-.5v3l-1-1-1 1v-3h-3z" />\n        </svg>'},{title:"Prerequisites",content:"Database, Probability and Statistics\n      <br> We will only support Python-based projects. Note that we don’t argue which language is better. We force the\n      used language due to the fairness (You can google to acquire the same resource).",icon:'\n        <svg xmlns="http://www.w3.org/2000/svg" width="8" height="8" viewBox="0 0 8 8">\n          <path d="M4 0c-1.1 0-2 .9-2 2 0 1.04-.52 1.98-1.34 2.66-.41.34-.66.82-.66 1.34h8c0-.52-.24-1-.66-1.34-.82-.68-1.34-1.62-1.34-2.66 0-1.1-.89-2-2-2zm-1 7c0 .55.45 1 1 1s1-.45 1-1h-2z" />\n        </svg>'}]}},65:function(e,t,n){var r;/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,i){"use strict";function o(e,t,n){var r,i=(t=t||te).createElement("script");if(i.text=e,n)for(r in ge)n[r]&&(i[r]=n[r]);t.head.appendChild(i).parentNode.removeChild(i)}function s(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?ae[le.call(e)]||"object":typeof e}function a(e){var t=!!e&&"length"in e&&e.length,n=s(e);return!fe(e)&&!he(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function l(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function u(e,t,n){return fe(t)?me.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?me.grep(e,function(e){return e===t!==n}):"string"!=typeof t?me.grep(e,function(e){return se.call(t,e)>-1!==n}):me.filter(t,e,n)}function c(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function p(e){return e}function d(e){throw e}function f(e,t,n,r){var i;try{e&&fe(i=e.promise)?i.call(e).done(t).fail(n):e&&fe(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}function h(){te.removeEventListener("DOMContentLoaded",h),n.removeEventListener("load",h),me.ready()}function g(e,t){return t.toUpperCase()}function m(e){return e.replace(Ne,"ms-").replace(_e,g)}function v(){this.expando=me.expando+v.uid++}function y(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Oe,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:He.test(e)?JSON.parse(e):e)}(n)}catch(e){}Pe.set(e,t,n)}else n=void 0;return n}function x(e,t,n,r){var i,o,s=20,a=r?function(){return r.cur()}:function(){return me.css(e,t,"")},l=a(),u=n&&n[3]||(me.cssNumber[t]?"":"px"),c=(me.cssNumber[t]||"px"!==u&&+l)&&Ie.exec(me.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;s--;)me.style(e,t,c+u),(1-o)*(1-(o=a()/l||.5))<=0&&(s=0),c/=o;c*=2,me.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}function b(e){var t,n=e.ownerDocument,r=e.nodeName,i=ze[r];return i||(t=n.body.appendChild(n.createElement(r)),i=me.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),ze[r]=i,i)}function w(e,t){for(var n,r,i=[],o=0,s=e.length;o<s;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=Me.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&We(r)&&(i[o]=b(r))):"none"!==n&&(i[o]="none",Me.set(r,"display",n)));for(o=0;o<s;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}function k(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&l(e,t)?me.merge([e],n):n}function T(e,t){for(var n=0,r=e.length;n<r;n++)Me.set(e[n],"globalEval",!t||Me.get(t[n],"globalEval"))}function S(e,t,n,r,i){for(var o,a,l,u,c,p,d=t.createDocumentFragment(),f=[],h=0,g=e.length;h<g;h++)if((o=e[h])||0===o)if("object"===s(o))me.merge(f,o.nodeType?[o]:o);else if(Ve.test(o)){for(a=a||d.appendChild(t.createElement("div")),l=(Ue.exec(o)||["",""])[1].toLowerCase(),u=Ge[l]||Ge._default,a.innerHTML=u[1]+me.htmlPrefilter(o)+u[2],p=u[0];p--;)a=a.lastChild;me.merge(f,a.childNodes),(a=d.firstChild).textContent=""}else f.push(t.createTextNode(o));for(d.textContent="",h=0;o=f[h++];)if(r&&me.inArray(o,r)>-1)i&&i.push(o);else if(c=me.contains(o.ownerDocument,o),a=k(d.appendChild(o),"script"),c&&T(a),n)for(p=0;o=a[p++];)Xe.test(o.type||"")&&n.push(o);return d}function C(){return!0}function j(){return!1}function A(){try{return te.activeElement}catch(e){}}function D(e,t,n,r,i,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(r=r||n,n=void 0),t)D(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=j;else if(!i)return e;return 1===o&&(s=i,(i=function(e){return me().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=me.guid++)),e.each(function(){me.event.add(this,t,i,r,n)})}function L(e,t){return l(e,"table")&&l(11!==t.nodeType?t:t.firstChild,"tr")&&me(e).children("tbody")[0]||e}function E(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function N(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function _(e,t){var n,r,i,o,s,a,l,u;if(1===t.nodeType){if(Me.hasData(e)&&(o=Me.access(e),s=Me.set(t,o),u=o.events))for(i in delete s.handle,s.events={},u)for(n=0,r=u[i].length;n<r;n++)me.event.add(t,i,u[i][n]);Pe.hasData(e)&&(a=Pe.access(e),l=me.extend({},a),Pe.set(t,l))}}function q(e,t,n,r){t=ie.apply([],t);var i,s,a,l,u,c,p=0,d=e.length,f=d-1,h=t[0],g=fe(h);if(g||d>1&&"string"==typeof h&&!de.checkClone&&rt.test(h))return e.each(function(i){var o=e.eq(i);g&&(t[0]=h.call(this,i,o.html())),q(o,t,n,r)});if(d&&(s=(i=S(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=s),s||r)){for(l=(a=me.map(k(i,"script"),E)).length;p<d;p++)u=i,p!==f&&(u=me.clone(u,!0,!0),l&&me.merge(a,k(u,"script"))),n.call(e[p],u,p);if(l)for(c=a[a.length-1].ownerDocument,me.map(a,N),p=0;p<l;p++)u=a[p],Xe.test(u.type||"")&&!Me.access(u,"globalEval")&&me.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?me._evalUrl&&me._evalUrl(u.src):o(u.textContent.replace(it,""),c,u))}return e}function M(e,t,n){for(var r,i=t?me.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||me.cleanData(k(r)),r.parentNode&&(n&&me.contains(r.ownerDocument,r)&&T(k(r,"script")),r.parentNode.removeChild(r));return e}function P(e,t,n){var r,i,o,s,a=e.style;return(n=n||st(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||me.contains(e.ownerDocument,e)||(s=me.style(e,t)),!de.pixelBoxStyles()&&ot.test(s)&&at.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function H(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function O(e){var t=me.cssProps[e];return t||(t=me.cssProps[e]=function(e){if(e in ft)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=dt.length;n--;)if((e=dt[n]+t)in ft)return e}(e)||e),t}function R(e,t,n){var r=Ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function I(e,t,n,r,i,o){var s="width"===t?1:0,a=0,l=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=me.css(e,n+$e[s],!0,i)),r?("content"===n&&(l-=me.css(e,"padding"+$e[s],!0,i)),"margin"!==n&&(l-=me.css(e,"border"+$e[s]+"Width",!0,i))):(l+=me.css(e,"padding"+$e[s],!0,i),"padding"!==n?l+=me.css(e,"border"+$e[s]+"Width",!0,i):a+=me.css(e,"border"+$e[s]+"Width",!0,i));return!r&&o>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-a-.5))),l}function $(e,t,n){var r=st(e),i=P(e,t,r),o="border-box"===me.css(e,"boxSizing",!1,r),s=o;if(ot.test(i)){if(!n)return i;i="auto"}return s=s&&(de.boxSizingReliable()||i===e.style[t]),("auto"===i||!parseFloat(i)&&"inline"===me.css(e,"display",!1,r))&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)],s=!0),(i=parseFloat(i)||0)+I(e,t,n||(o?"border":"content"),s,r,i)+"px"}function W(e,t,n,r,i){return new W.prototype.init(e,t,n,r,i)}function B(){gt&&(!1===te.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(B):n.setTimeout(B,me.fx.interval),me.fx.tick())}function z(){return n.setTimeout(function(){ht=void 0}),ht=Date.now()}function F(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=$e[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function U(e,t,n){for(var r,i=(X.tweeners[t]||[]).concat(X.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,t,e))return r}function X(e,t,n){var r,i,o=0,s=X.prefilters.length,a=me.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;for(var t=ht||z(),n=Math.max(0,u.startTime+u.duration-t),r=1-(n/u.duration||0),o=0,s=u.tweens.length;o<s;o++)u.tweens[o].run(r);return a.notifyWith(e,[u,r,n]),r<1&&s?n:(s||a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:me.extend({},t),opts:me.extend(!0,{specialEasing:{},easing:me.easing._default},n),originalProperties:t,originalOptions:n,startTime:ht||z(),duration:n.duration,tweens:[],createTween:function(t,n){var r=me.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),c=u.props;for((!function(e,t){var n,r,i,o,s;for(n in e)if(i=t[r=m(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(s=me.cssHooks[r])&&"expand"in s)for(n in o=s.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,u.opts.specialEasing));o<s;o++)if(r=X.prefilters[o].call(u,e,c,u.opts))return fe(r.stop)&&(me._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return me.map(c,U,u),fe(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),me.fx.timer(me.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}function G(e){return(e.match(Ae)||[]).join(" ")}function Y(e){return e.getAttribute&&e.getAttribute("class")||""}function J(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(Ae)||[]}function V(e,t,n,r){var i;if(Array.isArray(t))me.each(t,function(t,i){n||Dt.test(e)?r(e,i):V(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==s(t))r(e,t);else for(i in t)V(e+"["+i+"]",t[i],n,r)}function Q(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(Ae)||[];if(fe(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Z(e,t,n,r){function i(a){var l;return o[a]=!0,me.each(e[a]||[],function(e,a){var u=a(t,n,r);return"string"!=typeof u||s||o[u]?s?!(l=u):void 0:(t.dataTypes.unshift(u),i(u),!1)}),l}var o={},s=e===It;return i(t.dataTypes[0])||!o["*"]&&i("*")}function K(e,t){var n,r,i=me.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&me.extend(!0,e,r),e}var ee=[],te=n.document,ne=Object.getPrototypeOf,re=ee.slice,ie=ee.concat,oe=ee.push,se=ee.indexOf,ae={},le=ae.toString,ue=ae.hasOwnProperty,ce=ue.toString,pe=ce.call(Object),de={},fe=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},he=function(e){return null!=e&&e===e.window},ge={type:!0,src:!0,noModule:!0},me=function(e,t){return new me.fn.init(e,t)},ve=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;me.fn=me.prototype={jquery:"3.3.1",constructor:me,length:0,toArray:function(){return re.call(this)},get:function(e){return null==e?re.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=me.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return me.each(this,e)},map:function(e){return this.pushStack(me.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(re.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:oe,sort:ee.sort,splice:ee.splice},me.extend=me.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||fe(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(r=e[t])&&(u&&r&&(me.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&me.isPlainObject(n)?n:{},s[t]=me.extend(u,o,r)):void 0!==r&&(s[t]=r));return s},me.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==le.call(e)||(t=ne(e))&&("function"!=typeof(n=ue.call(t,"constructor")&&t.constructor)||ce.call(n)!==pe))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){o(e)},each:function(e,t){var n,r=0;if(a(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(ve,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(a(Object(e))?me.merge(n,"string"==typeof e?[e]:e):oe.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:se.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,s=!n;i<o;i++)!t(e[i],i)!==s&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,s=[];if(a(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return ie.apply([],s)},guid:1,support:de}),"function"==typeof Symbol&&(me.fn[Symbol.iterator]=ee[Symbol.iterator]),me.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ae["[object "+t+"]"]=t.toLowerCase()});var ye=/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){function t(e,t,n,r){var i,o,s,a,l,c,d,f=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!r&&((t?t.ownerDocument||t:O)!==L&&D(t),t=t||L,N)){if(11!==h&&(l=fe.exec(e)))if(i=l[1]){if(9===h){if(!(s=t.getElementById(i)))return n;if(s.id===i)return n.push(s),n}else if(f&&(s=f.getElementById(i))&&P(t,s)&&s.id===i)return n.push(s),n}else{if(l[2])return Y.apply(n,t.getElementsByTagName(e)),n;if((i=l[3])&&y.getElementsByClassName&&t.getElementsByClassName)return Y.apply(n,t.getElementsByClassName(i)),n}if(y.qsa&&!B[e+" "]&&(!_||!_.test(e))){if(1!==h)f=t,d=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(ve,ye):t.setAttribute("id",a=H),o=(c=k(e)).length;o--;)c[o]="#"+a+" "+p(c[o]);d=c.join(","),f=he.test(e)&&u(t.parentNode)||t}if(d)try{return Y.apply(n,f.querySelectorAll(d)),n}catch(e){}finally{a===H&&t.removeAttribute("id")}}}return S(e.replace(re,"$1"),t,n,r)}function n(){var e=[];return function t(n,r){return e.push(n+" ")>x.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function r(e){return e[H]=!0,e}function i(e){var t=L.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)x.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&be(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function u(e){return e&&void 0!==e.getElementsByTagName&&e}function c(){}function p(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function d(e,t,n){var r=t.dir,i=t.next,o=i||r,s=n&&"parentNode"===o,a=I++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,i);return!1}:function(t,n,l){var u,c,p,d=[R,a];if(l){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(c=(p=t[H]||(t[H]={}))[t.uniqueID]||(p[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=c[o])&&u[0]===R&&u[1]===a)return d[2]=u[2];if(c[o]=d,d[2]=e(t,n,l))return!0}return!1}}function f(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function h(e,t,n,r,i){for(var o,s=[],a=0,l=e.length,u=null!=t;a<l;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),u&&t.push(a)));return s}function g(e,n,i,o,s,a){return o&&!o[H]&&(o=g(o)),s&&!s[H]&&(s=g(s,a)),r(function(r,a,l,u){var c,p,d,f=[],g=[],m=a.length,v=r||function(e,n,r){for(var i=0,o=n.length;i<o;i++)t(e,n[i],r);return r}(n||"*",l.nodeType?[l]:l,[]),y=!e||!r&&n?v:h(v,f,e,l,u),x=i?s||(r?e:m||o)?[]:a:y;if(i&&i(y,x,l,u),o)for(c=h(x,g),o(c,[],l,u),p=c.length;p--;)(d=c[p])&&(x[g[p]]=!(y[g[p]]=d));if(r){if(s||e){if(s){for(c=[],p=x.length;p--;)(d=x[p])&&c.push(y[p]=d);s(null,x=[],c,u)}for(p=x.length;p--;)(d=x[p])&&(c=s?V(r,d):f[p])>-1&&(r[c]=!(a[c]=d))}}else x=h(x===a?x.splice(m,x.length):x),s?s(null,a,x,u):Y.apply(a,x)})}function m(e){for(var t,n,r,i=e.length,o=x.relative[e[0].type],s=o||x.relative[" "],a=o?1:0,l=d(function(e){return e===t},s,!0),u=d(function(e){return V(t,e)>-1},s,!0),c=[function(e,n,r){var i=!o&&(r||n!==C)||((t=n).nodeType?l(e,n,r):u(e,n,r));return t=null,i}];a<i;a++)if(n=x.relative[e[a].type])c=[d(f(c),n)];else{if((n=x.filter[e[a].type].apply(null,e[a].matches))[H]){for(r=++a;r<i&&!x.relative[e[r].type];r++);return g(a>1&&f(c),a>1&&p(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(re,"$1"),n,a<r&&m(e.slice(a,r)),r<i&&m(e=e.slice(r)),r<i&&p(e))}c.push(n)}return f(c)}var v,y,x,b,w,k,T,S,C,j,A,D,L,E,N,_,q,M,P,H="sizzle"+1*new Date,O=e.document,R=0,I=0,$=n(),W=n(),B=n(),z=function(e,t){return e===t&&(A=!0),0},F={}.hasOwnProperty,U=[],X=U.pop,G=U.push,Y=U.push,J=U.slice,V=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},Q="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",Z="[\\x20\\t\\r\\n\\f]",K="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ee="\\["+Z+"*("+K+")(?:"+Z+"*([*^$|!~]?=)"+Z+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+K+"))|)"+Z+"*\\]",te=":("+K+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ee+")*)|.*)\\)|)",ne=new RegExp(Z+"+","g"),re=new RegExp("^"+Z+"+|((?:^|[^\\\\])(?:\\\\.)*)"+Z+"+$","g"),ie=new RegExp("^"+Z+"*,"+Z+"*"),oe=new RegExp("^"+Z+"*([>+~]|"+Z+")"+Z+"*"),se=new RegExp("="+Z+"*([^\\]'\"]*?)"+Z+"*\\]","g"),ae=new RegExp(te),le=new RegExp("^"+K+"$"),ue={ID:new RegExp("^#("+K+")"),CLASS:new RegExp("^\\.("+K+")"),TAG:new RegExp("^("+K+"|[*])"),ATTR:new RegExp("^"+ee),PSEUDO:new RegExp("^"+te),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+Z+"*(even|odd|(([+-]|)(\\d*)n|)"+Z+"*(?:([+-]|)"+Z+"*(\\d+)|))"+Z+"*\\)|)","i"),bool:new RegExp("^(?:"+Q+")$","i"),needsContext:new RegExp("^"+Z+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+Z+"*((?:-\\d)?\\d*)"+Z+"*\\)|)(?=[^-]|$)","i")},ce=/^(?:input|select|textarea|button)$/i,pe=/^h\d$/i,de=/^[^{]+\{\s*\[native \w/,fe=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,he=/[+~]/,ge=new RegExp("\\\\([\\da-f]{1,6}"+Z+"?|("+Z+")|.)","ig"),me=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},ve=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ye=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},xe=function(){D()},be=d(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{Y.apply(U=J.call(O.childNodes),O.childNodes),U[O.childNodes.length].nodeType}catch(e){Y={apply:U.length?function(e,t){G.apply(e,J.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}for(v in y=t.support={},w=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},D=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:O;return r!==L&&9===r.nodeType&&r.documentElement?(E=(L=r).documentElement,N=!w(L),O!==L&&(n=L.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xe,!1):n.attachEvent&&n.attachEvent("onunload",xe)),y.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),y.getElementsByTagName=i(function(e){return e.appendChild(L.createComment("")),!e.getElementsByTagName("*").length}),y.getElementsByClassName=de.test(L.getElementsByClassName),y.getById=i(function(e){return E.appendChild(e).id=H,!L.getElementsByName||!L.getElementsByName(H).length}),y.getById?(x.filter.ID=function(e){var t=e.replace(ge,me);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&N){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var t=e.replace(ge,me);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&N){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),x.find.TAG=y.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):y.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},x.find.CLASS=y.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&N)return t.getElementsByClassName(e)},q=[],_=[],(y.qsa=de.test(L.querySelectorAll))&&(i(function(e){E.appendChild(e).innerHTML="<a id='"+H+"'></a><select id='"+H+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&_.push("[*^$]="+Z+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||_.push("\\["+Z+"*(?:value|"+Q+")"),e.querySelectorAll("[id~="+H+"-]").length||_.push("~="),e.querySelectorAll(":checked").length||_.push(":checked"),e.querySelectorAll("a#"+H+"+*").length||_.push(".#.+[+~]")}),i(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=L.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&_.push("name"+Z+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&_.push(":enabled",":disabled"),E.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&_.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),_.push(",.*:")})),(y.matchesSelector=de.test(M=E.matches||E.webkitMatchesSelector||E.mozMatchesSelector||E.oMatchesSelector||E.msMatchesSelector))&&i(function(e){y.disconnectedMatch=M.call(e,"*"),M.call(e,"[s!='']:x"),q.push("!=",te)}),_=_.length&&new RegExp(_.join("|")),q=q.length&&new RegExp(q.join("|")),t=de.test(E.compareDocumentPosition),P=t||de.test(E.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},z=t?function(e,t){if(e===t)return A=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!y.sortDetached&&t.compareDocumentPosition(e)===n?e===L||e.ownerDocument===O&&P(O,e)?-1:t===L||t.ownerDocument===O&&P(O,t)?1:j?V(j,e)-V(j,t):0:4&n?-1:1)}:function(e,t){if(e===t)return A=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],l=[t];if(!i||!o)return e===L?-1:t===L?1:i?-1:o?1:j?V(j,e)-V(j,t):0;if(i===o)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;a[r]===l[r];)r++;return r?s(a[r],l[r]):a[r]===O?-1:l[r]===O?1:0},L):L},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==L&&D(e),n=n.replace(se,"='$1']"),y.matchesSelector&&N&&!B[n+" "]&&(!q||!q.test(n))&&(!_||!_.test(n)))try{var r=M.call(e,n);if(r||y.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return t(n,L,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==L&&D(e),P(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==L&&D(e);var n=x.attrHandle[t.toLowerCase()],r=n&&F.call(x.attrHandle,t.toLowerCase())?n(e,t,!N):void 0;return void 0!==r?r:y.attributes||!N?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.escape=function(e){return(e+"").replace(ve,ye)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(A=!y.detectDuplicates,j=!y.sortStable&&e.slice(0),e.sort(z),A){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return j=null,e},b=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=b(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=b(t);return n},(x=t.selectors={cacheLength:50,createPseudo:r,match:ue,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ge,me),e[3]=(e[3]||e[4]||e[5]||"").replace(ge,me),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return ue.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ae.test(n)&&(t=k(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ge,me).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=$[e+" "];return t||(t=new RegExp("(^|"+Z+")"+e+"("+Z+"|$)"))&&$(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(ne," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,p,d,f,h,g=o!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,x=!1;if(m){if(o){for(;g;){for(d=t;d=d[g];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?m.firstChild:m.lastChild],s&&y){for(x=(f=(u=(c=(p=(d=m)[H]||(d[H]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]||[])[0]===R&&u[1])&&u[2],d=f&&m.childNodes[f];d=++f&&d&&d[g]||(x=f=0)||h.pop();)if(1===d.nodeType&&++x&&d===t){c[e]=[R,f,x];break}}else if(y&&(x=f=(u=(c=(p=(d=t)[H]||(d[H]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]||[])[0]===R&&u[1]),!1===x)for(;(d=++f&&d&&d[g]||(x=f=0)||h.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++x||(y&&((c=(p=d[H]||(d[H]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]=[R,x]),d!==t)););return(x-=i)===r||x%r==0&&x/r>=0}}},PSEUDO:function(e,n){var i,o=x.pseudos[e]||x.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[H]?o(n):o.length>1?(i=[e,e,"",n],x.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),s=i.length;s--;)e[r=V(e,i[s])]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=T(e.replace(re,"$1"));return i[H]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(ge,me),function(t){return(t.textContent||t.innerText||b(t)).indexOf(e)>-1}}),lang:r(function(e){return le.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ge,me).toLowerCase(),function(t){var n;do{if(n=N?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===E},focus:function(e){return e===L.activeElement&&(!L.hasFocus||L.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:a(!1),disabled:a(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return pe.test(e.nodeName)},input:function(e){return ce.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:l(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[v]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(v);for(v in{submit:!0,reset:!0})x.pseudos[v]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(v);return c.prototype=x.filters=x.pseudos,x.setFilters=new c,k=t.tokenize=function(e,n){var r,i,o,s,a,l,u,c=W[e+" "];if(c)return n?0:c.slice(0);for(a=e,l=[],u=x.preFilter;a;){for(s in r&&!(i=ie.exec(a))||(i&&(a=a.slice(i[0].length)||a),l.push(o=[])),r=!1,(i=oe.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(re," ")}),a=a.slice(r.length)),x.filter)!(i=ue[s].exec(a))||u[s]&&!(i=u[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):W(e,l).slice(0)},T=t.compile=function(e,n){var i,o=[],s=[],a=B[e+" "];if(!a){for(n||(n=k(e)),i=n.length;i--;)(a=m(n[i]))[H]?o.push(a):s.push(a);(a=B(e,function(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,l,u){var c,p,d,f=0,g="0",m=r&&[],v=[],y=C,b=r||o&&x.find.TAG("*",u),w=R+=null==y?1:Math.random()||.1,k=b.length;for(u&&(C=s===L||s||u);g!==k&&null!=(c=b[g]);g++){if(o&&c){for(p=0,s||c.ownerDocument===L||(D(c),a=!N);d=e[p++];)if(d(c,s||L,a)){l.push(c);break}u&&(R=w)}i&&((c=!d&&c)&&f--,r&&m.push(c))}if(f+=g,i&&g!==f){for(p=0;d=n[p++];)d(m,v,s,a);if(r){if(f>0)for(;g--;)m[g]||v[g]||(v[g]=X.call(l));v=h(v)}Y.apply(l,v),u&&!r&&v.length>0&&f+n.length>1&&t.uniqueSort(l)}return u&&(R=w,C=y),m};return i?r(s):s}(s,o))).selector=e}return a},S=t.select=function(e,t,n,r){var i,o,s,a,l,c="function"==typeof e&&e,d=!r&&k(e=c.selector||e);if(n=n||[],1===d.length){if((o=d[0]=d[0].slice(0)).length>2&&"ID"===(s=o[0]).type&&9===t.nodeType&&N&&x.relative[o[1].type]){if(!(t=(x.find.ID(s.matches[0].replace(ge,me),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=ue.needsContext.test(e)?0:o.length;i--&&(s=o[i],!x.relative[a=s.type]);)if((l=x.find[a])&&(r=l(s.matches[0].replace(ge,me),he.test(o[0].type)&&u(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&p(o)))return Y.apply(n,r),n;break}}return(c||T(e,d))(r,t,!N,n,!t||he.test(e)&&u(t.parentNode)||t),n},y.sortStable=H.split("").sort(z).join("")===H,y.detectDuplicates=!!A,D(),y.sortDetached=i(function(e){return 1&e.compareDocumentPosition(L.createElement("fieldset"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),y.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(Q,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(n);me.find=ye,me.expr=ye.selectors,me.expr[":"]=me.expr.pseudos,me.uniqueSort=me.unique=ye.uniqueSort,me.text=ye.getText,me.isXMLDoc=ye.isXML,me.contains=ye.contains,me.escapeSelector=ye.escape;var xe=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&me(e).is(n))break;r.push(e)}return r},be=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},we=me.expr.match.needsContext,ke=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;me.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?me.find.matchesSelector(r,e)?[r]:[]:me.find.matches(e,me.grep(t,function(e){return 1===e.nodeType}))},me.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(me(e).filter(function(){for(t=0;t<r;t++)if(me.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)me.find(e,i[t],n);return r>1?me.uniqueSort(n):n},filter:function(e){return this.pushStack(u(this,e||[],!1))},not:function(e){return this.pushStack(u(this,e||[],!0))},is:function(e){return!!u(this,"string"==typeof e&&we.test(e)?me(e):e||[],!1).length}});var Te,Se=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(me.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||Te,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Se.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof me?t[0]:t,me.merge(this,me.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:te,!0)),ke.test(r[1])&&me.isPlainObject(t))for(r in t)fe(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=te.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):fe(e)?void 0!==n.ready?n.ready(e):e(me):me.makeArray(e,this)}).prototype=me.fn,Te=me(te);var Ce=/^(?:parents|prev(?:Until|All))/,je={children:!0,contents:!0,next:!0,prev:!0};me.fn.extend({has:function(e){var t=me(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(me.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],s="string"!=typeof e&&me(e);if(!we.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&me.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?me.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?se.call(me(e),this[0]):se.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(me.uniqueSort(me.merge(this.get(),me(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),me.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return xe(e,"parentNode")},parentsUntil:function(e,t,n){return xe(e,"parentNode",n)},next:function(e){return c(e,"nextSibling")},prev:function(e){return c(e,"previousSibling")},nextAll:function(e){return xe(e,"nextSibling")},prevAll:function(e){return xe(e,"previousSibling")},nextUntil:function(e,t,n){return xe(e,"nextSibling",n)},prevUntil:function(e,t,n){return xe(e,"previousSibling",n)},siblings:function(e){return be((e.parentNode||{}).firstChild,e)},children:function(e){return be(e.firstChild)},contents:function(e){return l(e,"iframe")?e.contentDocument:(l(e,"template")&&(e=e.content||e),me.merge([],e.childNodes))}},function(e,t){me.fn[e]=function(n,r){var i=me.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=me.filter(r,i)),this.length>1&&(je[e]||me.uniqueSort(i),Ce.test(e)&&i.reverse()),this.pushStack(i)}});var Ae=/[^\x20\t\r\n\f]+/g;me.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return me.each(e.match(Ae)||[],function(e,n){t[n]=!0}),t}(e):me.extend({},e);var t,n,r,i,o=[],a=[],l=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;l=-1)for(n=a.shift();++l<o.length;)!1===o[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(l=o.length-1,a.push(n)),function t(n){me.each(n,function(n,r){fe(r)?e.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==s(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return me.each(arguments,function(e,t){for(var n;(n=me.inArray(t,o,n))>-1;)o.splice(n,1),n<=l&&l--}),this},has:function(e){return e?me.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},me.extend({Deferred:function(e){var t=[["notify","progress",me.Callbacks("memory"),me.Callbacks("memory"),2],["resolve","done",me.Callbacks("once memory"),me.Callbacks("once memory"),0,"resolved"],["reject","fail",me.Callbacks("once memory"),me.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return me.Deferred(function(n){me.each(t,function(t,r){var i=fe(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&fe(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(e,r,i){function o(e,t,r,i){return function(){var a=this,l=arguments,u=function(){var n,u;if(!(e<s)){if((n=r.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,fe(u)?i?u.call(n,o(s,t,p,i),o(s,t,d,i)):(s++,u.call(n,o(s,t,p,i),o(s,t,d,i),o(s,t,p,t.notifyWith))):(r!==p&&(a=void 0,l=[n]),(i||t.resolveWith)(a,l))}},c=i?u:function(){try{u()}catch(n){me.Deferred.exceptionHook&&me.Deferred.exceptionHook(n,c.stackTrace),e+1>=s&&(r!==d&&(a=void 0,l=[n]),t.rejectWith(a,l))}};e?c():(me.Deferred.getStackHook&&(c.stackTrace=me.Deferred.getStackHook()),n.setTimeout(c))}}var s=0;return me.Deferred(function(n){t[0][3].add(o(0,n,fe(i)?i:p,n.notifyWith)),t[1][3].add(o(0,n,fe(e)?e:p)),t[2][3].add(o(0,n,fe(r)?r:d))}).promise()},promise:function(e){return null!=e?me.extend(e,i):i}},o={};return me.each(t,function(e,n){var s=n[2],a=n[5];i[n[1]]=s.add,a&&s.add(function(){r=a},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=s.fireWith}),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=re.call(arguments),o=me.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?re.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(f(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||fe(i[n]&&i[n].then)))return o.then();for(;n--;)f(i[n],s(n),o.reject);return o.promise()}});var De=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;me.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&De.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},me.readyException=function(e){n.setTimeout(function(){throw e})};var Le=me.Deferred();me.fn.ready=function(e){return Le.then(e).catch(function(e){me.readyException(e)}),this},me.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--me.readyWait:me.isReady)||(me.isReady=!0,!0!==e&&--me.readyWait>0||Le.resolveWith(te,[me]))}}),me.ready.then=Le.then,"complete"===te.readyState||"loading"!==te.readyState&&!te.documentElement.doScroll?n.setTimeout(me.ready):(te.addEventListener("DOMContentLoaded",h),n.addEventListener("load",h));var Ee=function(e,t,n,r,i,o,a){var l=0,u=e.length,c=null==n;if("object"===s(n))for(l in i=!0,n)Ee(e,t,l,n[l],!0,o,a);else if(void 0!==r&&(i=!0,fe(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(me(e),n)})),t))for(;l<u;l++)t(e[l],n,a?r:r.call(e[l],l,t(e[l],n)));return i?e:c?t.call(e):u?t(e[0],n):o},Ne=/^-ms-/,_e=/-([a-z])/g,qe=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};v.uid=1,v.prototype={cache:function(e){var t=e[this.expando];return t||(t={},qe(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[m(t)]=n;else for(r in t)i[m(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][m(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(m):(t=m(t))in r?[t]:t.match(Ae)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||me.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!me.isEmptyObject(t)}};var Me=new v,Pe=new v,He=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Oe=/[A-Z]/g;me.extend({hasData:function(e){return Pe.hasData(e)||Me.hasData(e)},data:function(e,t,n){return Pe.access(e,t,n)},removeData:function(e,t){Pe.remove(e,t)},_data:function(e,t,n){return Me.access(e,t,n)},_removeData:function(e,t){Me.remove(e,t)}}),me.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=Pe.get(o),1===o.nodeType&&!Me.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=m(r.slice(5)),y(o,r,i[r]));Me.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Pe.set(this,e)}):Ee(this,function(t){var n;if(o&&void 0===t)return void 0!==(n=Pe.get(o,e))?n:void 0!==(n=y(o,e))?n:void 0;this.each(function(){Pe.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Pe.remove(this,e)})}}),me.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Me.get(e,t),n&&(!r||Array.isArray(n)?r=Me.access(e,t,me.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=me.queue(e,t),r=n.length,i=n.shift(),o=me._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){me.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Me.get(e,n)||Me.access(e,n,{empty:me.Callbacks("once memory").add(function(){Me.remove(e,[t+"queue",n])})})}}),me.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?me.queue(this[0],e):void 0===t?this:this.each(function(){var n=me.queue(this,e,t);me._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&me.dequeue(this,e)})},dequeue:function(e){return this.each(function(){me.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=me.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Me.get(o[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var Re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ie=new RegExp("^(?:([+-])=|)("+Re+")([a-z%]*)$","i"),$e=["Top","Right","Bottom","Left"],We=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&me.contains(e.ownerDocument,e)&&"none"===me.css(e,"display")},Be=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=s[o];return i},ze={};me.fn.extend({show:function(){return w(this,!0)},hide:function(){return w(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){We(this)?me(this).show():me(this).hide()})}});var Fe=/^(?:checkbox|radio)$/i,Ue=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Xe=/^$|^module$|\/(?:java|ecma)script/i,Ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ge.optgroup=Ge.option,Ge.tbody=Ge.tfoot=Ge.colgroup=Ge.caption=Ge.thead,Ge.th=Ge.td;var Ye,Je,Ve=/<|&#?\w+;/;Ye=te.createDocumentFragment().appendChild(te.createElement("div")),(Je=te.createElement("input")).setAttribute("type","radio"),Je.setAttribute("checked","checked"),Je.setAttribute("name","t"),Ye.appendChild(Je),de.checkClone=Ye.cloneNode(!0).cloneNode(!0).lastChild.checked,Ye.innerHTML="<textarea>x</textarea>",de.noCloneChecked=!!Ye.cloneNode(!0).lastChild.defaultValue;var Qe=te.documentElement,Ze=/^key/,Ke=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,et=/^([^.]*)(?:\.(.+)|)/;me.event={global:{},add:function(e,t,n,r,i){var o,s,a,l,u,c,p,d,f,h,g,m=Me.get(e);if(m)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&me.find.matchesSelector(Qe,i),n.guid||(n.guid=me.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(t){return void 0!==me&&me.event.triggered!==t.type?me.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(Ae)||[""]).length;u--;)f=g=(a=et.exec(t[u])||[])[1],h=(a[2]||"").split(".").sort(),f&&(p=me.event.special[f]||{},f=(i?p.delegateType:p.bindType)||f,p=me.event.special[f]||{},c=me.extend({type:f,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&me.expr.match.needsContext.test(i),namespace:h.join(".")},o),(d=l[f])||((d=l[f]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(e,r,h,s)||e.addEventListener&&e.addEventListener(f,s)),p.add&&(p.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),me.event.global[f]=!0)},remove:function(e,t,n,r,i){var o,s,a,l,u,c,p,d,f,h,g,m=Me.hasData(e)&&Me.get(e);if(m&&(l=m.events)){for(u=(t=(t||"").match(Ae)||[""]).length;u--;)if(f=g=(a=et.exec(t[u])||[])[1],h=(a[2]||"").split(".").sort(),f){for(p=me.event.special[f]||{},d=l[f=(r?p.delegateType:p.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=d.length;o--;)c=d[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,p.remove&&p.remove.call(e,c));s&&!d.length&&(p.teardown&&!1!==p.teardown.call(e,h,m.handle)||me.removeEvent(e,f,m.handle),delete l[f])}else for(f in l)me.event.remove(e,f+t[u],n,r,!0);me.isEmptyObject(l)&&Me.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,s,a=me.event.fix(e),l=new Array(arguments.length),u=(Me.get(this,"events")||{})[a.type]||[],c=me.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(s=me.event.handlers.call(this,a,u),t=0;(i=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(r=((me.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,l))&&!1===(a.result=r)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,r,i,o,s,a=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[i=(r=t[n]).selector+" "]&&(s[i]=r.needsContext?me(i,this).index(u)>-1:me.find(i,this,null,[u]).length),s[i]&&o.push(r);o.length&&a.push({elem:u,handlers:o})}return u=this,l<t.length&&a.push({elem:u,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(me.Event.prototype,e,{enumerable:!0,configurable:!0,get:fe(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[me.expando]?e:new me.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==A()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===A()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&l(this,"input"))return this.click(),!1},_default:function(e){return l(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},me.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},me.Event=function(e,t){if(!(this instanceof me.Event))return new me.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?C:j,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&me.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[me.expando]=!0},me.Event.prototype={constructor:me.Event,isDefaultPrevented:j,isPropagationStopped:j,isImmediatePropagationStopped:j,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=C,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=C,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=C,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},me.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ze.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ke.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},me.event.addProp),me.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){me.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,i=e.handleObj;return r&&(r===this||me.contains(this,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}}),me.fn.extend({on:function(e,t,n,r){return D(this,e,t,n,r)},one:function(e,t,n,r){return D(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,me(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=j),this.each(function(){me.event.remove(this,e,n,t)})}});var tt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,nt=/<script|<style|<link/i,rt=/checked\s*(?:[^=]|=\s*.checked.)/i,it=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;me.extend({htmlPrefilter:function(e){return e.replace(tt,"<$1></$2>")},clone:function(e,t,n){var r,i,o,s,a,l,u,c=e.cloneNode(!0),p=me.contains(e.ownerDocument,e);if(!(de.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||me.isXMLDoc(e)))for(s=k(c),r=0,i=(o=k(e)).length;r<i;r++)a=o[r],l=s[r],"input"===(u=l.nodeName.toLowerCase())&&Fe.test(a.type)?l.checked=a.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=a.defaultValue);if(t)if(n)for(o=o||k(e),s=s||k(c),r=0,i=o.length;r<i;r++)_(o[r],s[r]);else _(e,c);return(s=k(c,"script")).length>0&&T(s,!p&&k(e,"script")),c},cleanData:function(e){for(var t,n,r,i=me.event.special,o=0;void 0!==(n=e[o]);o++)if(qe(n)){if(t=n[Me.expando]){if(t.events)for(r in t.events)i[r]?me.event.remove(n,r):me.removeEvent(n,r,t.handle);n[Me.expando]=void 0}n[Pe.expando]&&(n[Pe.expando]=void 0)}}}),me.fn.extend({detach:function(e){return M(this,e,!0)},remove:function(e){return M(this,e)},text:function(e){return Ee(this,function(e){return void 0===e?me.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return q(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||L(this,e).appendChild(e)})},prepend:function(){return q(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=L(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return q(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return q(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(me.cleanData(k(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return me.clone(this,e,t)})},html:function(e){return Ee(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!nt.test(e)&&!Ge[(Ue.exec(e)||["",""])[1].toLowerCase()]){e=me.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(me.cleanData(k(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return q(this,arguments,function(t){var n=this.parentNode;me.inArray(this,e)<0&&(me.cleanData(k(this)),n&&n.replaceChild(t,this))},e)}}),me.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){me.fn[e]=function(e){for(var n,r=[],i=me(e),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),me(i[s])[t](n),oe.apply(r,n.get());return this.pushStack(r)}});var ot=new RegExp("^("+Re+")(?!px)[a-z%]+$","i"),st=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},at=new RegExp($e.join("|"),"i");!function(){function e(){if(u){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Qe.appendChild(l).appendChild(u);var e=n.getComputedStyle(u);r="1%"!==e.top,a=12===t(e.marginLeft),u.style.right="60%",s=36===t(e.right),i=36===t(e.width),u.style.position="absolute",o=36===u.offsetWidth||"absolute",Qe.removeChild(l),u=null}}function t(e){return Math.round(parseFloat(e))}var r,i,o,s,a,l=te.createElement("div"),u=te.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",de.clearCloneStyle="content-box"===u.style.backgroundClip,me.extend(de,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),a},scrollboxSize:function(){return e(),o}}))}();var lt=/^(none|table(?!-c[ea]).+)/,ut=/^--/,ct={position:"absolute",visibility:"hidden",display:"block"},pt={letterSpacing:"0",fontWeight:"400"},dt=["Webkit","Moz","ms"],ft=te.createElement("div").style;me.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=P(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=m(t),l=ut.test(t),u=e.style;if(l||(t=O(a)),s=me.cssHooks[t]||me.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:u[t];"string"==(o=typeof n)&&(i=Ie.exec(n))&&i[1]&&(n=x(e,t,i),o="number"),null!=n&&n==n&&("number"===o&&(n+=i&&i[3]||(me.cssNumber[a]?"":"px")),de.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o,s,a=m(t);return ut.test(t)||(t=O(a)),(s=me.cssHooks[t]||me.cssHooks[a])&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=P(e,t,r)),"normal"===i&&t in pt&&(i=pt[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),me.each(["height","width"],function(e,t){me.cssHooks[t]={get:function(e,n,r){if(n)return!lt.test(me.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?$(e,t,r):Be(e,ct,function(){return $(e,t,r)})},set:function(e,n,r){var i,o=st(e),s="border-box"===me.css(e,"boxSizing",!1,o),a=r&&I(e,t,r,s,o);return s&&de.scrollboxSize()===o.position&&(a-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-I(e,t,"border",!1,o)-.5)),a&&(i=Ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=me.css(e,t)),R(0,n,a)}}}),me.cssHooks.marginLeft=H(de.reliableMarginLeft,function(e,t){if(t)return(parseFloat(P(e,"marginLeft"))||e.getBoundingClientRect().left-Be(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),me.each({margin:"",padding:"",border:"Width"},function(e,t){me.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+$e[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(me.cssHooks[e+t].set=R)}),me.fn.extend({css:function(e,t){return Ee(this,function(e,t,n){var r,i,o={},s=0;if(Array.isArray(t)){for(r=st(e),i=t.length;s<i;s++)o[t[s]]=me.css(e,t[s],!1,r);return o}return void 0!==n?me.style(e,t,n):me.css(e,t)},e,t,arguments.length>1)}}),me.Tween=W,W.prototype={constructor:W,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||me.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(me.cssNumber[n]?"":"px")},cur:function(){var e=W.propHooks[this.prop];return e&&e.get?e.get(this):W.propHooks._default.get(this)},run:function(e){var t,n=W.propHooks[this.prop];return this.options.duration?this.pos=t=me.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):W.propHooks._default.set(this),this}},W.prototype.init.prototype=W.prototype,W.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=me.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){me.fx.step[e.prop]?me.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[me.cssProps[e.prop]]&&!me.cssHooks[e.prop]?e.elem[e.prop]=e.now:me.style(e.elem,e.prop,e.now+e.unit)}}},W.propHooks.scrollTop=W.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},me.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},me.fx=W.prototype.init,me.fx.step={};var ht,gt,mt=/^(?:toggle|show|hide)$/,vt=/queueHooks$/;me.Animation=me.extend(X,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return x(n.elem,e,Ie.exec(t),n),n}]},tweener:function(e,t){fe(e)?(t=e,e=["*"]):e=e.match(Ae);for(var n,r=0,i=e.length;r<i;r++)n=e[r],X.tweeners[n]=X.tweeners[n]||[],X.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,s,a,l,u,c,p="width"in t||"height"in t,d=this,f={},h=e.style,g=e.nodeType&&We(e),m=Me.get(e,"fxshow");for(r in n.queue||(null==(s=me._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,me.queue(e,"fx").length||s.empty.fire()})})),t)if(i=t[r],mt.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;g=!0}f[r]=m&&m[r]||me.style(e,r)}if((l=!me.isEmptyObject(t))||!me.isEmptyObject(f))for(r in p&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(u=m&&m.display)&&(u=Me.get(e,"display")),"none"===(c=me.css(e,"display"))&&(u?c=u:(w([e],!0),u=e.style.display||u,c=me.css(e,"display"),w([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===me.css(e,"float")&&(l||(d.done(function(){h.display=u}),null==u&&(c=h.display,u="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1,f)l||(m?"hidden"in m&&(g=m.hidden):m=Me.access(e,"fxshow",{display:u}),o&&(m.hidden=!g),g&&w([e],!0),d.done(function(){for(r in g||w([e]),Me.remove(e,"fxshow"),f)me.style(e,r,f[r])})),l=U(g?m[r]:0,r,d),r in m||(m[r]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?X.prefilters.unshift(e):X.prefilters.push(e)}}),me.speed=function(e,t,n){var r=e&&"object"==typeof e?me.extend({},e):{complete:n||!n&&t||fe(e)&&e,duration:e,easing:n&&t||t&&!fe(t)&&t};return me.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in me.fx.speeds?r.duration=me.fx.speeds[r.duration]:r.duration=me.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){fe(r.old)&&r.old.call(this),r.queue&&me.dequeue(this,r.queue)},r},me.fn.extend({fadeTo:function(e,t,n,r){return this.filter(We).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=me.isEmptyObject(e),o=me.speed(t,n,r),s=function(){var t=X(this,me.extend({},e),o);(i||Me.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=me.timers,s=Me.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&vt.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||me.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Me.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=me.timers,s=r?r.length:0;for(n.finish=!0,me.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),me.each(["toggle","show","hide"],function(e,t){var n=me.fn[t];me.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(F(t,!0),e,r,i)}}),me.each({slideDown:F("show"),slideUp:F("hide"),slideToggle:F("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){me.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),me.timers=[],me.fx.tick=function(){var e,t=0,n=me.timers;for(ht=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||me.fx.stop(),ht=void 0},me.fx.timer=function(e){me.timers.push(e),me.fx.start()},me.fx.interval=13,me.fx.start=function(){gt||(gt=!0,B())},me.fx.stop=function(){gt=null},me.fx.speeds={slow:600,fast:200,_default:400},me.fn.delay=function(e,t){return e=me.fx&&me.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var i=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(i)}})},function(){var e=te.createElement("input"),t=te.createElement("select").appendChild(te.createElement("option"));e.type="checkbox",de.checkOn=""!==e.value,de.optSelected=t.selected,(e=te.createElement("input")).value="t",e.type="radio",de.radioValue="t"===e.value}();var yt,xt=me.expr.attrHandle;me.fn.extend({attr:function(e,t){return Ee(this,me.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){me.removeAttr(this,e)})}}),me.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?me.prop(e,t,n):(1===o&&me.isXMLDoc(e)||(i=me.attrHooks[t.toLowerCase()]||(me.expr.match.bool.test(t)?yt:void 0)),void 0!==n?null===n?void me.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=me.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!de.radioValue&&"radio"===t&&l(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(Ae);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),yt={set:function(e,t,n){return!1===t?me.removeAttr(e,n):e.setAttribute(n,n),n}},me.each(me.expr.match.bool.source.match(/\w+/g),function(e,t){var n=xt[t]||me.find.attr;xt[t]=function(e,t,r){var i,o,s=t.toLowerCase();return r||(o=xt[s],xt[s]=i,i=null!=n(e,t,r)?s:null,xt[s]=o),i}});var bt=/^(?:input|select|textarea|button)$/i,wt=/^(?:a|area)$/i;me.fn.extend({prop:function(e,t){return Ee(this,me.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[me.propFix[e]||e]})}}),me.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&me.isXMLDoc(e)||(t=me.propFix[t]||t,i=me.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=me.find.attr(e,"tabindex");return t?parseInt(t,10):bt.test(e.nodeName)||wt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),de.optSelected||(me.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),me.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){me.propFix[this.toLowerCase()]=this}),me.fn.extend({addClass:function(e){var t,n,r,i,o,s,a,l=0;if(fe(e))return this.each(function(t){me(this).addClass(e.call(this,t,Y(this)))});if((t=J(e)).length)for(;n=this[l++];)if(i=Y(n),r=1===n.nodeType&&" "+G(i)+" "){for(s=0;o=t[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(a=G(r))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,i,o,s,a,l=0;if(fe(e))return this.each(function(t){me(this).removeClass(e.call(this,t,Y(this)))});if(!arguments.length)return this.attr("class","");if((t=J(e)).length)for(;n=this[l++];)if(i=Y(n),r=1===n.nodeType&&" "+G(i)+" "){for(s=0;o=t[s++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(a=G(r))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):fe(e)?this.each(function(n){me(this).toggleClass(e.call(this,n,Y(this),t),t)}):this.each(function(){var t,i,o,s;if(r)for(i=0,o=me(this),s=J(e);t=s[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=Y(this))&&Me.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Me.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+G(Y(n))+" ").indexOf(t)>-1)return!0;return!1}});var kt=/\r/g;me.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=fe(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,me(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=me.map(i,function(e){return null==e?"":e+""})),(t=me.valHooks[this.type]||me.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=me.valHooks[i.type]||me.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(kt,""):null==n?"":n:void 0}}),me.extend({valHooks:{option:{get:function(e){var t=me.find.attr(e,"value");return null!=t?t:G(me.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],u=s?o+1:i.length;for(r=o<0?u:s?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!l(n.parentNode,"optgroup"))){if(t=me(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,r,i=e.options,o=me.makeArray(t),s=i.length;s--;)((r=i[s]).selected=me.inArray(me.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),me.each(["radio","checkbox"],function(){me.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=me.inArray(me(e).val(),t)>-1}},de.checkOn||(me.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),de.focusin="onfocusin"in n;var Tt=/^(?:focusinfocus|focusoutblur)$/,St=function(e){e.stopPropagation()};me.extend(me.event,{trigger:function(e,t,r,i){var o,s,a,l,u,c,p,d,f=[r||te],h=ue.call(e,"type")?e.type:e,g=ue.call(e,"namespace")?e.namespace.split("."):[];if(s=d=a=r=r||te,3!==r.nodeType&&8!==r.nodeType&&!Tt.test(h+me.event.triggered)&&(h.indexOf(".")>-1&&(h=(g=h.split(".")).shift(),g.sort()),u=h.indexOf(":")<0&&"on"+h,(e=e[me.expando]?e:new me.Event(h,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:me.makeArray(t,[e]),p=me.event.special[h]||{},i||!p.trigger||!1!==p.trigger.apply(r,t))){if(!i&&!p.noBubble&&!he(r)){for(l=p.delegateType||h,Tt.test(l+h)||(s=s.parentNode);s;s=s.parentNode)f.push(s),a=s;a===(r.ownerDocument||te)&&f.push(a.defaultView||a.parentWindow||n)}for(o=0;(s=f[o++])&&!e.isPropagationStopped();)d=s,e.type=o>1?l:p.bindType||h,(c=(Me.get(s,"events")||{})[e.type]&&Me.get(s,"handle"))&&c.apply(s,t),(c=u&&s[u])&&c.apply&&qe(s)&&(e.result=c.apply(s,t),!1===e.result&&e.preventDefault());return e.type=h,i||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(f.pop(),t)||!qe(r)||u&&fe(r[h])&&!he(r)&&((a=r[u])&&(r[u]=null),me.event.triggered=h,e.isPropagationStopped()&&d.addEventListener(h,St),r[h](),e.isPropagationStopped()&&d.removeEventListener(h,St),me.event.triggered=void 0,a&&(r[u]=a)),e.result}},simulate:function(e,t,n){var r=me.extend(new me.Event,n,{type:e,isSimulated:!0});me.event.trigger(r,null,t)}}),me.fn.extend({trigger:function(e,t){return this.each(function(){me.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return me.event.trigger(e,t,n,!0)}}),de.focusin||me.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){me.event.simulate(t,e.target,me.event.fix(e))};me.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=Me.access(r,t);i||r.addEventListener(e,n,!0),Me.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Me.access(r,t)-1;i?Me.access(r,t,i):(r.removeEventListener(e,n,!0),Me.remove(r,t))}}});var Ct=n.location,jt=Date.now(),At=/\?/;me.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||me.error("Invalid XML: "+e),t};var Dt=/\[\]$/,Lt=/\r?\n/g,Et=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;me.param=function(e,t){var n,r=[],i=function(e,t){var n=fe(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!me.isPlainObject(e))me.each(e,function(){i(this.name,this.value)});else for(n in e)V(n,e[n],t,i);return r.join("&")},me.fn.extend({serialize:function(){return me.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=me.prop(this,"elements");return e?me.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!me(this).is(":disabled")&&Nt.test(this.nodeName)&&!Et.test(e)&&(this.checked||!Fe.test(e))}).map(function(e,t){var n=me(this).val();return null==n?null:Array.isArray(n)?me.map(n,function(e){return{name:t.name,value:e.replace(Lt,"\r\n")}}):{name:t.name,value:n.replace(Lt,"\r\n")}}).get()}});var _t=/%20/g,qt=/#.*$/,Mt=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ht=/^(?:GET|HEAD)$/,Ot=/^\/\//,Rt={},It={},$t="*/".concat("*"),Wt=te.createElement("a");Wt.href=Ct.href,me.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":me.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?K(K(e,me.ajaxSettings),t):K(me.ajaxSettings,e)},ajaxPrefilter:Q(Rt),ajaxTransport:Q(It),ajax:function(e,t){function r(e,t,r,a){var u,d,f,b,w,k=t;c||(c=!0,l&&n.clearTimeout(l),i=void 0,s=a||"",T.readyState=e>0?4:0,u=e>=200&&e<300||304===e,r&&(b=function(e,t,n){for(var r,i,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}(h,T,r)),b=function(e,t,n,r){var i,o,s,a,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=u[l+" "+o]||u["* "+o]))for(i in u)if((a=i.split(" "))[1]===o&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[i]:!0!==u[i]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(h,b,T,u),u?(h.ifModified&&((w=T.getResponseHeader("Last-Modified"))&&(me.lastModified[o]=w),(w=T.getResponseHeader("etag"))&&(me.etag[o]=w)),204===e||"HEAD"===h.type?k="nocontent":304===e?k="notmodified":(k=b.state,d=b.data,u=!(f=b.error))):(f=k,!e&&k||(k="error",e<0&&(e=0))),T.status=e,T.statusText=(t||k)+"",u?v.resolveWith(g,[d,k,T]):v.rejectWith(g,[T,k,f]),T.statusCode(x),x=void 0,p&&m.trigger(u?"ajaxSuccess":"ajaxError",[T,h,u?d:f]),y.fireWith(g,[T,k]),p&&(m.trigger("ajaxComplete",[T,h]),--me.active||me.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,o,s,a,l,u,c,p,d,f,h=me.ajaxSetup({},t),g=h.context||h,m=h.context&&(g.nodeType||g.jquery)?me(g):me.event,v=me.Deferred(),y=me.Callbacks("once memory"),x=h.statusCode||{},b={},w={},k="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=Pt.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?s:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)T.always(e[T.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||k;return i&&i.abort(t),r(0,t),this}};if(v.promise(T),h.url=((e||h.url||Ct.href)+"").replace(Ot,Ct.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(Ae)||[""],null==h.crossDomain){u=te.createElement("a");try{u.href=h.url,u.href=u.href,h.crossDomain=Wt.protocol+"//"+Wt.host!=u.protocol+"//"+u.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=me.param(h.data,h.traditional)),Z(Rt,h,t,T),c)return T;for(d in(p=me.event&&h.global)&&0==me.active++&&me.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Ht.test(h.type),o=h.url.replace(qt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(_t,"+")):(f=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(At.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Mt,"$1"),f=(At.test(o)?"&":"?")+"_="+jt+++f),h.url=o+f),h.ifModified&&(me.lastModified[o]&&T.setRequestHeader("If-Modified-Since",me.lastModified[o]),me.etag[o]&&T.setRequestHeader("If-None-Match",me.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&T.setRequestHeader("Content-Type",h.contentType),T.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+$t+"; q=0.01":""):h.accepts["*"]),h.headers)T.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(g,T,h)||c))return T.abort();if(k="abort",y.add(h.complete),T.done(h.success),T.fail(h.error),i=Z(It,h,t,T)){if(T.readyState=1,p&&m.trigger("ajaxSend",[T,h]),c)return T;h.async&&h.timeout>0&&(l=n.setTimeout(function(){T.abort("timeout")},h.timeout));try{c=!1,i.send(b,r)}catch(e){if(c)throw e;r(-1,e)}}else r(-1,"No Transport");return T},getJSON:function(e,t,n){return me.get(e,t,n,"json")},getScript:function(e,t){return me.get(e,void 0,t,"script")}}),me.each(["get","post"],function(e,t){me[t]=function(e,n,r,i){return fe(n)&&(i=i||r,r=n,n=void 0),me.ajax(me.extend({url:e,type:t,dataType:i,data:n,success:r},me.isPlainObject(e)&&e))}}),me._evalUrl=function(e){return me.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},me.fn.extend({wrapAll:function(e){var t;return this[0]&&(fe(e)&&(e=e.call(this[0])),t=me(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return fe(e)?this.each(function(t){me(this).wrapInner(e.call(this,t))}):this.each(function(){var t=me(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=fe(e);return this.each(function(n){me(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){me(this).replaceWith(this.childNodes)}),this}}),me.expr.pseudos.hidden=function(e){return!me.expr.pseudos.visible(e)},me.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},me.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Bt={0:200,1223:204},zt=me.ajaxSettings.xhr();de.cors=!!zt&&"withCredentials"in zt,de.ajax=zt=!!zt,me.ajaxTransport(function(e){var t,r;if(de.cors||zt&&!e.crossDomain)return{send:function(i,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)a.setRequestHeader(s,i[s]);t=function(e){return function(){t&&(t=r=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Bt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),r=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=r:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),me.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),me.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return me.globalEval(e),e}}}),me.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),me.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(r,i){t=me("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),te.head.appendChild(t[0])},abort:function(){n&&n()}}});var Ft,Ut=[],Xt=/(=)\?(?=&|$)|\?\?/;me.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Ut.pop()||me.expando+"_"+jt++;return this[e]=!0,e}}),me.ajaxPrefilter("json jsonp",function(e,t,r){var i,o,s,a=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=fe(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Xt,"$1"+i):!1!==e.jsonp&&(e.url+=(At.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return s||me.error(i+" was not called"),s[0]},e.dataTypes[0]="json",o=n[i],n[i]=function(){s=arguments},r.always(function(){void 0===o?me(n).removeProp(i):n[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Ut.push(i)),s&&fe(o)&&o(s[0]),s=o=void 0}),"script"}),de.createHTMLDocument=((Ft=te.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ft.childNodes.length),me.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(de.createHTMLDocument?((r=(t=te.implementation.createHTMLDocument("")).createElement("base")).href=te.location.href,t.head.appendChild(r)):t=te),i=ke.exec(e),o=!n&&[],i?[t.createElement(i[1])]:(i=S([e],t,o),o&&o.length&&me(o).remove(),me.merge([],i.childNodes)));var r,i,o},me.fn.load=function(e,t,n){var r,i,o,s=this,a=e.indexOf(" ");return a>-1&&(r=G(e.slice(a)),e=e.slice(0,a)),fe(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&me.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?me("<div>").append(me.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},me.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){me.fn[t]=function(e){return this.on(t,e)}}),me.expr.pseudos.animated=function(e){return me.grep(me.timers,function(t){return e===t.elem}).length},me.offset={setOffset:function(e,t,n){var r,i,o,s,a,l,u=me.css(e,"position"),c=me(e),p={};"static"===u&&(e.style.position="relative"),a=c.offset(),o=me.css(e,"top"),l=me.css(e,"left"),("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1?(s=(r=c.position()).top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(l)||0),fe(t)&&(t=t.call(e,n,me.extend({},a))),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+i),"using"in t?t.using.call(e,p):c.css(p)}},me.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){me.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===me.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===me.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=me(e).offset()).top+=me.css(e,"borderTopWidth",!0),i.left+=me.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-me.css(r,"marginTop",!0),left:t.left-i.left-me.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===me.css(e,"position");)e=e.offsetParent;return e||Qe})}}),me.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;me.fn[e]=function(r){return Ee(this,function(e,r,i){var o;if(he(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),me.each(["top","left"],function(e,t){me.cssHooks[t]=H(de.pixelPosition,function(e,n){if(n)return n=P(e,t),ot.test(n)?me(e).position()[t]+"px":n})}),me.each({Height:"height",Width:"width"},function(e,t){me.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){me.fn[r]=function(i,o){var s=arguments.length&&(n||"boolean"!=typeof i),a=n||(!0===i||!0===o?"margin":"border");return Ee(this,function(t,n,i){var o;return he(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?me.css(t,n,a):me.style(t,n,i,a)},t,s?i:void 0,s)}})}),me.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){me.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),me.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),me.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),me.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),fe(e))return r=re.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(re.call(arguments)))}).guid=e.guid=e.guid||me.guid++,i},me.holdReady=function(e){e?me.readyWait++:me.ready(!0)},me.isArray=Array.isArray,me.parseJSON=JSON.parse,me.nodeName=l,me.isFunction=fe,me.isWindow=he,me.camelCase=m,me.type=s,me.now=Date.now,me.isNumeric=function(e){var t=me.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(r=function(){return me}.apply(t,[]))||(e.exports=r);var Gt=n.jQuery,Yt=n.$;return me.noConflict=function(e){return n.$===me&&(n.$=Yt),e&&n.jQuery===me&&(n.jQuery=Gt),me},i||(n.jQuery=n.$=me),me})},66:function(e,t,n){(function(t){!function(t){"use strict";function n(e){this.tokens=[],this.tokens.links={},this.options=e||f.defaults,this.rules=h.normal,this.options.gfm&&(this.options.tables?this.rules=h.tables:this.rules=h.gfm)}function r(e,t){if(this.options=t||f.defaults,this.links=e,this.rules=g.normal,this.renderer=this.options.renderer||new i,this.renderer.options=this.options,!this.links)throw new Error("Tokens array requires a `links` property.");this.options.gfm?this.options.breaks?this.rules=g.breaks:this.rules=g.gfm:this.options.pedantic&&(this.rules=g.pedantic)}function i(e){this.options=e||{}}function o(){}function s(e){this.tokens=[],this.token=null,this.options=e||f.defaults,this.options.renderer=this.options.renderer||new i,this.renderer=this.options.renderer,this.renderer.options=this.options}function a(e,t){return e.replace(t?/&/g:/&(?!#?\w+;)/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function l(e){return e.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi,function(e,t){return"colon"===(t=t.toLowerCase())?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):""})}function u(e,t){return e=e.source,t=t||"",{replace:function(t,n){return n=(n=n.source||n).replace(/(^|[^\[])\^/g,"$1"),e=e.replace(t,n),this},getRegex:function(){return new RegExp(e,t)}}}function c(e,t){return m[" "+e]||(/^[^:]+:\/*[^\/]*$/.test(e)?m[" "+e]=e+"/":m[" "+e]=e.replace(/[^\/]*$/,"")),e=m[" "+e],"//"===t.slice(0,2)?e.replace(/:[\s\S]*/,":")+t:"/"===t.charAt(0)?e.replace(/(:\/*[^\/]*)[\s\S]*/,"$1")+t:e+t}function p(){}function d(e){for(var t,n,r=1;r<arguments.length;r++)for(n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function f(e,t,r){if(void 0===e||null===e)throw new Error("marked(): input parameter is undefined or null");if("string"!=typeof e)throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(e)+", string expected");if(r||"function"==typeof t){r||(r=t,t=null);var i,o,l=(t=d({},f.defaults,t||{})).highlight,u=0;try{i=n.lex(e,t)}catch(e){return r(e)}o=i.length;var c=function(e){if(e)return t.highlight=l,r(e);var n;try{n=s.parse(i,t)}catch(t){e=t}return t.highlight=l,e?r(e):r(null,n)};if(!l||l.length<3)return c();if(delete t.highlight,!o)return c();for(;u<i.length;u++)!function(e){"code"!==e.type?--o||c():l(e.text,e.lang,function(t,n){return t?c(t):null==n||n===e.text?--o||c():(e.text=n,e.escaped=!0,void(--o||c()))})}(i[u])}else try{return t&&(t=d({},f.defaults,t)),s.parse(n.lex(e,t),t)}catch(e){if(e.message+="\nPlease report this to https://github.com/chjj/marked.",(t||f.defaults).silent)return"<p>An error occurred:</p><pre>"+a(e.message+"",!0)+"</pre>";throw e}}var h={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:p,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,nptable:p,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:/^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,def:/^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,table:p,lheading:/^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,paragraph:/^([^\n]+(?:\n?(?!hr|heading|lheading| {0,3}>|tag)[^\n]+)+)/,text:/^[^\n]+/};h._label=/(?:\\[\[\]]|[^\[\]])+/,h._title=/(?:"(?:\\"|[^"]|"[^"\n]*")*"|'\n?(?:[^'\n]+\n?)*'|\([^()]*\))/,h.def=u(h.def).replace("label",h._label).replace("title",h._title).getRegex(),h.bullet=/(?:[*+-]|\d+\.)/,h.item=/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/,h.item=u(h.item,"gm").replace(/bull/g,h.bullet).getRegex(),h.list=u(h.list).replace(/bull/g,h.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+h.def.source+")").getRegex(),h._tag="(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b",h.html=u(h.html).replace("comment",/<!--[\s\S]*?-->/).replace("closed",/<(tag)[\s\S]+?<\/\1>/).replace("closing",/<tag(?:"[^"]*"|'[^']*'|\s[^'"\/>\s]*)*?\/?>/).replace(/tag/g,h._tag).getRegex(),h.paragraph=u(h.paragraph).replace("hr",h.hr).replace("heading",h.heading).replace("lheading",h.lheading).replace("tag","<"+h._tag).getRegex(),h.blockquote=u(h.blockquote).replace("paragraph",h.paragraph).getRegex(),h.normal=d({},h),h.gfm=d({},h.normal,{fences:/^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\n? *\1 *(?:\n+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/}),h.gfm.paragraph=u(h.paragraph).replace("(?!","(?!"+h.gfm.fences.source.replace("\\1","\\2")+"|"+h.list.source.replace("\\1","\\3")+"|").getRegex(),h.tables=d({},h.gfm,{nptable:/^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,table:/^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/}),n.rules=h,n.lex=function(e,t){return new n(t).lex(e)},n.prototype.lex=function(e){return e=e.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n"),this.token(e,!0)},n.prototype.token=function(e,t){var n,r,i,o,s,a,l,u,c,p;for(e=e.replace(/^ +$/gm,"");e;)if((i=this.rules.newline.exec(e))&&(e=e.substring(i[0].length),i[0].length>1&&this.tokens.push({type:"space"})),i=this.rules.code.exec(e))e=e.substring(i[0].length),i=i[0].replace(/^ {4}/gm,""),this.tokens.push({type:"code",text:this.options.pedantic?i:i.replace(/\n+$/,"")});else if(i=this.rules.fences.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"code",lang:i[2],text:i[3]||""});else if(i=this.rules.heading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"heading",depth:i[1].length,text:i[2]});else if(t&&(i=this.rules.nptable.exec(e))){for(e=e.substring(i[0].length),a={type:"table",header:i[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:i[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:i[3].replace(/\n$/,"").split("\n")},u=0;u<a.align.length;u++)/^ *-+: *$/.test(a.align[u])?a.align[u]="right":/^ *:-+: *$/.test(a.align[u])?a.align[u]="center":/^ *:-+ *$/.test(a.align[u])?a.align[u]="left":a.align[u]=null;for(u=0;u<a.cells.length;u++)a.cells[u]=a.cells[u].split(/ *\| */);this.tokens.push(a)}else if(i=this.rules.hr.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"hr"});else if(i=this.rules.blockquote.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"blockquote_start"}),i=i[0].replace(/^ *> ?/gm,""),this.token(i,t),this.tokens.push({type:"blockquote_end"});else if(i=this.rules.list.exec(e)){for(e=e.substring(i[0].length),o=i[2],this.tokens.push({type:"list_start",ordered:o.length>1}),n=!1,p=(i=i[0].match(this.rules.item)).length,u=0;u<p;u++)l=(a=i[u]).length,~(a=a.replace(/^ *([*+-]|\d+\.) +/,"")).indexOf("\n ")&&(l-=a.length,a=this.options.pedantic?a.replace(/^ {1,4}/gm,""):a.replace(new RegExp("^ {1,"+l+"}","gm"),"")),this.options.smartLists&&u!==p-1&&(o===(s=h.bullet.exec(i[u+1])[0])||o.length>1&&s.length>1||(e=i.slice(u+1).join("\n")+e,u=p-1)),r=n||/\n\n(?!\s*$)/.test(a),u!==p-1&&(n="\n"===a.charAt(a.length-1),r||(r=n)),this.tokens.push({type:r?"loose_item_start":"list_item_start"}),this.token(a,!1),this.tokens.push({type:"list_item_end"});this.tokens.push({type:"list_end"})}else if(i=this.rules.html.exec(e))e=e.substring(i[0].length),this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:!this.options.sanitizer&&("pre"===i[1]||"script"===i[1]||"style"===i[1]),text:i[0]});else if(t&&(i=this.rules.def.exec(e)))e=e.substring(i[0].length),i[3]&&(i[3]=i[3].substring(1,i[3].length-1)),c=i[1].toLowerCase(),this.tokens.links[c]||(this.tokens.links[c]={href:i[2],title:i[3]});else if(t&&(i=this.rules.table.exec(e))){for(e=e.substring(i[0].length),a={type:"table",header:i[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:i[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:i[3].replace(/(?: *\| *)?\n$/,"").split("\n")},u=0;u<a.align.length;u++)/^ *-+: *$/.test(a.align[u])?a.align[u]="right":/^ *:-+: *$/.test(a.align[u])?a.align[u]="center":/^ *:-+ *$/.test(a.align[u])?a.align[u]="left":a.align[u]=null;for(u=0;u<a.cells.length;u++)a.cells[u]=a.cells[u].replace(/^ *\| *| *\| *$/g,"").split(/ *\| */);this.tokens.push(a)}else if(i=this.rules.lheading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"heading",depth:"="===i[2]?1:2,text:i[1]});else if(t&&(i=this.rules.paragraph.exec(e)))e=e.substring(i[0].length),this.tokens.push({type:"paragraph",text:"\n"===i[1].charAt(i[1].length-1)?i[1].slice(0,-1):i[1]});else if(i=this.rules.text.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"text",text:i[0]});else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0));return this.tokens};var g={escape:/^\\([\\`*{}\[\]()#+\-.!_>])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:p,tag:/^<!--[\s\S]*?-->|^<\/?[a-zA-Z0-9\-]+(?:"[^"]*"|'[^']*'|\s[^<'">\/\s]*)*?\/?>/,link:/^!?\[(inside)\]\(href\)/,reflink:/^!?\[(inside)\]\s*\[([^\]]*)\]/,nolink:/^!?\[((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\]/,strong:/^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,em:/^_([^\s_](?:[^_]|__)+?[^\s_])_\b|^\*((?:\*\*|[^*])+?)\*(?!\*)/,code:/^(`+)\s*([\s\S]*?[^`]?)\s*\1(?!`)/,br:/^ {2,}\n(?!\s*$)/,del:p,text:/^[\s\S]+?(?=[\\<!\[`*]|\b_| {2,}\n|$)/};g._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,g._email=/[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,g.autolink=u(g.autolink).replace("scheme",g._scheme).replace("email",g._email).getRegex(),g._inside=/(?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]]|\](?=[^\[]*\]))*/,g._href=/\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/,g.link=u(g.link).replace("inside",g._inside).replace("href",g._href).getRegex(),g.reflink=u(g.reflink).replace("inside",g._inside).getRegex(),g.normal=d({},g),g.pedantic=d({},g.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/}),g.gfm=d({},g.normal,{escape:u(g.escape).replace("])","~|])").getRegex(),url:u(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/).replace("email",g._email).getRegex(),_backpedal:/(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^~~(?=\S)([\s\S]*?\S)~~/,text:u(g.text).replace("]|","~]|").replace("|","|https?://|ftp://|www\\.|[a-zA-Z0-9.!#$%&'*+/=?^_`{\\|}~-]+@|").getRegex()}),g.breaks=d({},g.gfm,{br:u(g.br).replace("{2,}","*").getRegex(),text:u(g.gfm.text).replace("{2,}","*").getRegex()}),r.rules=g,r.output=function(e,t,n){return new r(t,n).output(e)},r.prototype.output=function(e){for(var t,n,r,i,o="";e;)if(i=this.rules.escape.exec(e))e=e.substring(i[0].length),o+=i[1];else if(i=this.rules.autolink.exec(e))e=e.substring(i[0].length),r="@"===i[2]?"mailto:"+(n=a(this.mangle(i[1]))):n=a(i[1]),o+=this.renderer.link(r,null,n);else if(this.inLink||!(i=this.rules.url.exec(e))){if(i=this.rules.tag.exec(e))!this.inLink&&/^<a /i.test(i[0])?this.inLink=!0:this.inLink&&/^<\/a>/i.test(i[0])&&(this.inLink=!1),e=e.substring(i[0].length),o+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(i[0]):a(i[0]):i[0];else if(i=this.rules.link.exec(e))e=e.substring(i[0].length),this.inLink=!0,o+=this.outputLink(i,{href:i[2],title:i[3]}),this.inLink=!1;else if((i=this.rules.reflink.exec(e))||(i=this.rules.nolink.exec(e))){if(e=e.substring(i[0].length),t=(i[2]||i[1]).replace(/\s+/g," "),!(t=this.links[t.toLowerCase()])||!t.href){o+=i[0].charAt(0),e=i[0].substring(1)+e;continue}this.inLink=!0,o+=this.outputLink(i,t),this.inLink=!1}else if(i=this.rules.strong.exec(e))e=e.substring(i[0].length),o+=this.renderer.strong(this.output(i[2]||i[1]));else if(i=this.rules.em.exec(e))e=e.substring(i[0].length),o+=this.renderer.em(this.output(i[2]||i[1]));else if(i=this.rules.code.exec(e))e=e.substring(i[0].length),o+=this.renderer.codespan(a(i[2].trim(),!0));else if(i=this.rules.br.exec(e))e=e.substring(i[0].length),o+=this.renderer.br();else if(i=this.rules.del.exec(e))e=e.substring(i[0].length),o+=this.renderer.del(this.output(i[1]));else if(i=this.rules.text.exec(e))e=e.substring(i[0].length),o+=this.renderer.text(a(this.smartypants(i[0])));else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0))}else i[0]=this.rules._backpedal.exec(i[0])[0],e=e.substring(i[0].length),"@"===i[2]?r="mailto:"+(n=a(i[0])):(n=a(i[0]),r="www."===i[1]?"http://"+n:n),o+=this.renderer.link(r,null,n);return o},r.prototype.outputLink=function(e,t){var n=a(t.href),r=t.title?a(t.title):null;return"!"!==e[0].charAt(0)?this.renderer.link(n,r,this.output(e[1])):this.renderer.image(n,r,a(e[1]))},r.prototype.smartypants=function(e){return this.options.smartypants?e.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014\/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014\/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…"):e},r.prototype.mangle=function(e){if(!this.options.mangle)return e;for(var t,n="",r=e.length,i=0;i<r;i++)t=e.charCodeAt(i),Math.random()>.5&&(t="x"+t.toString(16)),n+="&#"+t+";";return n},i.prototype.code=function(e,t,n){if(this.options.highlight){var r=this.options.highlight(e,t);null!=r&&r!==e&&(n=!0,e=r)}return t?'<pre><code class="'+this.options.langPrefix+a(t,!0)+'">'+(n?e:a(e,!0))+"\n</code></pre>\n":"<pre><code>"+(n?e:a(e,!0))+"\n</code></pre>"},i.prototype.blockquote=function(e){return"<blockquote>\n"+e+"</blockquote>\n"},i.prototype.html=function(e){return e},i.prototype.heading=function(e,t,n){return"<h"+t+' id="'+this.options.headerPrefix+n.toLowerCase().replace(/[^\w]+/g,"-")+'">'+e+"</h"+t+">\n"},i.prototype.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"},i.prototype.list=function(e,t){var n=t?"ol":"ul";return"<"+n+">\n"+e+"</"+n+">\n"},i.prototype.listitem=function(e){return"<li>"+e+"</li>\n"},i.prototype.paragraph=function(e){return"<p>"+e+"</p>\n"},i.prototype.table=function(e,t){return"<table>\n<thead>\n"+e+"</thead>\n<tbody>\n"+t+"</tbody>\n</table>\n"},i.prototype.tablerow=function(e){return"<tr>\n"+e+"</tr>\n"},i.prototype.tablecell=function(e,t){var n=t.header?"th":"td";return(t.align?"<"+n+' style="text-align:'+t.align+'">':"<"+n+">")+e+"</"+n+">\n"},i.prototype.strong=function(e){return"<strong>"+e+"</strong>"},i.prototype.em=function(e){return"<em>"+e+"</em>"},i.prototype.codespan=function(e){return"<code>"+e+"</code>"},i.prototype.br=function(){return this.options.xhtml?"<br/>":"<br>"},i.prototype.del=function(e){return"<del>"+e+"</del>"},i.prototype.link=function(e,t,n){if(this.options.sanitize){try{var r=decodeURIComponent(l(e)).replace(/[^\w:]/g,"").toLowerCase()}catch(e){return n}if(0===r.indexOf("javascript:")||0===r.indexOf("vbscript:")||0===r.indexOf("data:"))return n}this.options.baseUrl&&!v.test(e)&&(e=c(this.options.baseUrl,e));var i='<a href="'+e+'"';return t&&(i+=' title="'+t+'"'),i+=">"+n+"</a>"},i.prototype.image=function(e,t,n){this.options.baseUrl&&!v.test(e)&&(e=c(this.options.baseUrl,e));var r='<img src="'+e+'" alt="'+n+'"';return t&&(r+=' title="'+t+'"'),r+=this.options.xhtml?"/>":">"},i.prototype.text=function(e){return e},o.prototype.strong=o.prototype.em=o.prototype.codespan=o.prototype.del=o.prototype.text=function(e){return e},o.prototype.link=o.prototype.image=function(e,t,n){return""+n},o.prototype.br=function(){return""},s.parse=function(e,t){return new s(t).parse(e)},s.prototype.parse=function(e){this.inline=new r(e.links,this.options),this.inlineText=new r(e.links,d({},this.options,{renderer:new o})),this.tokens=e.reverse();for(var t="";this.next();)t+=this.tok();return t},s.prototype.next=function(){return this.token=this.tokens.pop()},s.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},s.prototype.parseText=function(){for(var e=this.token.text;"text"===this.peek().type;)e+="\n"+this.next().text;return this.inline.output(e)},s.prototype.tok=function(){switch(this.token.type){case"space":return"";case"hr":return this.renderer.hr();case"heading":return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,l(this.inlineText.output(this.token.text)));case"code":return this.renderer.code(this.token.text,this.token.lang,this.token.escaped);case"table":var e,t,n,r,i="",o="";for(n="",e=0;e<this.token.header.length;e++)n+=this.renderer.tablecell(this.inline.output(this.token.header[e]),{header:!0,align:this.token.align[e]});for(i+=this.renderer.tablerow(n),e=0;e<this.token.cells.length;e++){for(t=this.token.cells[e],n="",r=0;r<t.length;r++)n+=this.renderer.tablecell(this.inline.output(t[r]),{header:!1,align:this.token.align[r]});o+=this.renderer.tablerow(n)}return this.renderer.table(i,o);case"blockquote_start":for(o="";"blockquote_end"!==this.next().type;)o+=this.tok();return this.renderer.blockquote(o);case"list_start":o="";for(var s=this.token.ordered;"list_end"!==this.next().type;)o+=this.tok();return this.renderer.list(o,s);case"list_item_start":for(o="";"list_item_end"!==this.next().type;)o+="text"===this.token.type?this.parseText():this.tok();return this.renderer.listitem(o);case"loose_item_start":for(o="";"list_item_end"!==this.next().type;)o+=this.tok();return this.renderer.listitem(o);case"html":var a=this.token.pre||this.options.pedantic?this.token.text:this.inline.output(this.token.text);return this.renderer.html(a);case"paragraph":return this.renderer.paragraph(this.inline.output(this.token.text));case"text":return this.renderer.paragraph(this.parseText())}};var m={},v=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;p.exec=p,f.options=f.setOptions=function(e){return d(f.defaults,e),f},f.defaults={gfm:!0,tables:!0,breaks:!1,pedantic:!1,sanitize:!1,sanitizer:null,mangle:!0,smartLists:!1,silent:!1,highlight:null,langPrefix:"lang-",smartypants:!1,headerPrefix:"",renderer:new i,xhtml:!1,baseUrl:null},f.Parser=s,f.parser=s.parse,f.Renderer=i,f.TextRenderer=o,f.Lexer=n,f.lexer=n.lex,f.InlineLexer=r,f.inlineLexer=r.output,f.parse=f,e.exports=f}(this||"undefined"!=typeof window&&window)}).call(t,n(42))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,